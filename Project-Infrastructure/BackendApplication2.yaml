AWSTemplateFormatVersion: '2010-09-09'
Description: 'Multi-Region RDS and S3 Deployment'

Parameters:
  SourceRegion:
    Type: String
    Default: 'eu-central-1'
    Description: 'Source region for RDS'
  ReplicaRegion:
    Type: String
    Default: 'eu-west-1a'
    Description: 'Replica region for RDS and S3'
  BucketName:
    Type: String
    Default: StaticContent
  
  SourceBucketName:
    Type: String
    Description: 'Name for the source bucket'
    Default: 'kanta12'

  DestinationBucketName:
    Type: String
    Description: 'Name for the destination bucket'
    Default: 'my-test-bucket-destination-replication'

  DestinationRegion:
    Type: String
    Description: 'Region for the destination bucket'
    Default: 'eu-west-1'

  BucketName:
    Type: String
    Default: publicstaticcontent12

  DomainName:
    Type: String
    Default: team-c.internal

Resources:
# ApiGateway to invoke Lambda
# --------------------------------------------------------------------------------------------------
  ApiGatewayRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      ApiKeySourceType: HEADER
      Description: An API Gateway with a Lambda Integration
      EndpointConfiguration:
        Types:
          - EDGE
      Name: lambda-api

  ApiGatewayResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: 'lambda'
      RestApiId: !Ref ApiGatewayRestApi

  ApiGatewayMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: POST
      Integration:
        ConnectionType: INTERNET
        Credentials: !GetAtt ApiGatewayIamRole.Arn
        IntegrationHttpMethod: POST
        PassthroughBehavior: WHEN_NO_MATCH
        TimeoutInMillis: 29000
        Type: AWS_PROXY
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunction.Arn}/invocations'
      OperationName: 'lambda'
      ResourceId: !Ref ApiGatewayResource
      RestApiId: !Ref ApiGatewayRestApi

  ApiGatewayModel:
    Type: AWS::ApiGateway::Model
    Properties:
      ContentType: 'application/json'
      RestApiId: !Ref ApiGatewayRestApi
      Schema: {}
  
  ApiGatewayStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref ApiGatewayDeployment
      Description: Lambda API Stage v0
      RestApiId: !Ref ApiGatewayRestApi
      StageName: 'v0'
  
  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: ApiGatewayMethod
    Properties:
      Description: Lambda API Deployment
      RestApiId: !Ref ApiGatewayRestApi

  ApiGatewayIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: ''
            Effect: 'Allow'
            Principal:
              Service:
                - 'apigateway.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: '/'
      Policies:
        - PolicyName: LambdaAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action: 'lambda:*'
                Resource: !GetAtt LambdaFunction.Arn
  
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          def handler(event, context):
            response = {
              'isBase64Encoded': False,
              'statusCode': 200,
              'headers': {},
              'multiValueHeaders': {},
              'body': 'Hello, World!'
            }
            return response        
      Description: AWS Lambda function
      FunctionName: 'lambda-function'
      Handler: index.handler
      MemorySize: 256
      Role: !GetAtt LambdaIamRole.Arn
      Runtime: python3.7
      Timeout: 60

  LambdaIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - 'lambda.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: '/'
# ApiGateway end
# -------------------------------------------------------------------------------------------------------

# RDSInstance
# ----------------------------------------------------------------------------------------------------
  MySecurityGroupRDS:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Otvori samo sigurne portove za RDS
      SecurityGroupIngress:
          IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
      VpcId: vpc-0f8a463d3c84ab974
      Tags: 
        - Key: Name
          Value: RDSSecurityGroup  

  MyRDSSecrets:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: 'This is the secret for my RDS instance'
      GenerateSecretString:
        SecretStringTemplate: '{"username": "admin"}'
        GenerateStringKey: 'password'
        PasswordLength: 16
        ExcludeCharacters: '"@/\' 

  MyDBInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      KmsKeyId: !Ref RDSKMSKey
      AllocatedStorage: 20
      DBInstanceClass: db.t3.micro
      Engine: mysql
      DBName: mydatabase
      MultiAZ: false
      DBSubnetGroupName: default-vpc-0f8a463d3c84ab974
      MasterUsername: !Join ['', ['{{resolve:secretsmanager:', !Ref MyRDSSecrets, ':SecretString:username}}' ]]
      MasterUserPassword: !Join ['', ['{{resolve:secretsmanager:', !Ref MyRDSSecrets, ':SecretString:password}}' ]]
      BackupRetentionPeriod: 1
      AutoMinorVersionUpgrade: true
      DBInstanceIdentifier: 'rds-instance' 
      VPCSecurityGroups:
        - !Ref MySecurityGroupRDS
      AvailabilityZone: eu-central-1b
      StorageEncrypted: true

# RDSInstance end
# -------------------------------------------------------------------------------------------------------------------

# S3CrossRegion+Lambda
# ---------------------------------------------------------------------------------------------------------------------

  # LambdaExecutionRole:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     AssumeRolePolicyDocument:
  #       Version: '2012-10-17'
  #       Statement:
  #         - Effect: Allow
  #           Principal:
  #             Service: lambda.amazonaws.com
  #           Action: 'sts:AssumeRole'
  #     Policies:
  #       - PolicyName: LambdaExecutionPolicy
  #         PolicyDocument:
  #           Version: '2012-10-17'
  #           Statement:
  #             - Effect: Allow
  #               Action: 'logs:*'
  #               Resource: 'arn:aws:logs:*:*:*'

  # AppendItemToListFunction:
  #   Type: AWS::Lambda::Function
  #   Properties:
  #     Handler: index.handler
  #     Role: !GetAtt LambdaExecutionRole.Arn
  #     Code:
  #       ZipFile: |
  #         exports.handler = async (event) => {
  #           console.log('Hello, World!');
  #           return {
  #             statusCode: 200,
  #             body: JSON.stringify('Hello, World!'),
  #           };
  #         };
  #     Runtime: nodejs18.x

  # LambdaInvokePermission:
  #   Type: AWS::Lambda::Permission
  #   DependsOn: LambdaExecutionRole
  #   Properties:
  #     FunctionName: !GetAtt AppendItemToListFunction.Arn
  #     Action: lambda:InvokeFunction
  #     Principal: s3.amazonaws.com
  #     SourceAccount: !Ref 'AWS::AccountId'
  #     SourceArn: 
  #       Fn::Sub: "arn:aws:s3:::${SourceBucketName}-encryption-service"

  # SourceBucketRole:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     AssumeRolePolicyDocument:
  #       Version: '2012-10-17'
  #       Statement:
  #         - Effect: 'Allow'
  #           Principal:
  #             Service: 's3.amazonaws.com'
  #           Action: 'sts:AssumeRole'

  # SourceBucket:
  #   Type: AWS::S3::Bucket
  #   DependsOn: LambdaInvokePermission
  #   Properties:
  #     BucketEncryption:
  #       ServerSideEncryptionConfiguration:
  #         - ServerSideEncryptionByDefault:
  #             SSEAlgorithm: aws:kms
  #             KMSMasterKeyID: !GetAtt S3KMSKey.Arn
  #     BucketName:
  #       Fn::Sub: "${SourceBucketName}-encryption-service"
  #     NotificationConfiguration:
  #       LambdaConfigurations:
  #         - Event: 's3:ObjectCreated:*'
  #           Function: !GetAtt AppendItemToListFunction.Arn
  #     VersioningConfiguration:
  #       Status: 'Enabled'
  #     ReplicationConfiguration:
  #       Role: !GetAtt SourceBucketRole.Arn
  #       Rules:
  #         - Destination:
  #             Bucket: !Sub "arn:aws:s3:::${DestinationBucketName}-${DestinationRegion}"
  #           Prefix: ""
  #           Status: Enabled

  # SourceBucketPolicy:
  #   Type: AWS::IAM::Policy
  #   Properties:
  #     PolicyName: 'source-bucket-replication-permissions'
  #     Roles:
  #       - Ref: 'SourceBucketRole'
  #     PolicyDocument:
  #       Version: '2012-10-17'
  #       Statement:
  #         - Effect: 'Allow'
  #           Action:
  #             - 's3:GetObjectVersionForReplication'
  #             - 's3:GetObjectVersionAcl'
  #             - 's3:GetObject'
  #           Resource:
  #             - !Sub 'arn:aws:s3:::${SourceBucketName}/*'
  #         - Effect: 'Allow'
  #           Action:
  #             - 's3:ListBucket'
  #             - 's3:GetReplicationConfiguration'
  #           Resource:
  #             - !Sub 'arn:aws:s3:::${SourceBucketName}'
  #         - Effect: 'Allow'
  #           Action:
  #             - 's3:ReplicateObject'
  #             - 's3:ReplicateDelete'
  #             - 's3:ReplicateTags'
  #             - 's3:GetObjectVersionTagging'
  #           Resource: !Sub 'arn:aws:s3:::${DestinationBucketName}-${DestinationRegion}/*'
  
  # DestinationBucketRole:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     AssumeRolePolicyDocument:
  #       Version: '2012-10-17'
  #       Statement:
  #         - Effect: 'Allow'
  #           Principal:
  #             Service: 's3.amazonaws.com'
  #           Action: 'sts:AssumeRole'

  # DestinationBucketPolicy:
  #   Type: AWS::IAM::Policy
  #   Properties:
  #     PolicyName: 'destination-bucket-replication-permissions'
  #     Roles:
  #       - Ref: 'DestinationBucketRole'
  #     PolicyDocument:
  #       Version: '2012-10-17'
  #       Statement:
  #         - Effect: 'Allow'
  #           Action:
  #             - 's3:ReplicateObject'
  #             - 's3:ReplicateDelete'
  #             - 's3:ReplicateTags'
  #             - 's3:GetObjectVersionTagging'
  #           Resource: !Sub 'arn:aws:s3:::${DestinationBucketName}-${DestinationRegion}/*'

  # # DestinationBucket:
  # #   Type: AWS::S3::Bucket
  # #   Properties:
  # #     BucketName: !Sub "${DestinationBucketName}-${DestinationRegion}"
  # #     VersioningConfiguration:
  # #       Status: 'Enabled'

  # DestinationBucket:
  #   Type: AWS::S3::Bucket
  #   Properties:
  #     BucketName: !Sub "${DestinationBucketName}-${DestinationRegion}"
  #     VersioningConfiguration:
  #       Status: 'Enabled'
  #     BucketEncryption:
  #       ServerSideEncryptionConfiguration:
  #         - ServerSideEncryptionByDefault:
  #             SSEAlgorithm: aws:kms
  #             KMSMasterKeyID: arn:aws:kms:eu-west-1:050572347738:key/d69ec3b3-bce1-427f-b026-5dc98cfa5b90
    
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: LambdaExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: 'logs:*'
                Resource: 'arn:aws:logs:*:*:*'

  AppendItemToListFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          exports.handler = async (event) => {
            console.log('Hello, World!');
            return {
              statusCode: 200,
              body: JSON.stringify('Hello, World!'),
            };
          };
      Runtime: nodejs18.x

  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    DependsOn: LambdaExecutionRole
    Properties:
      FunctionName: !GetAtt AppendItemToListFunction.Arn
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: 
        Fn::Sub: "arn:aws:s3:::${SourceBucketName}-encryption-service"

  SourceBucketRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 's3.amazonaws.com'
            Action: 'sts:AssumeRole'

  SourceBucket:
    Type: AWS::S3::Bucket
    DependsOn: LambdaInvokePermission
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: aws:kms
              KMSMasterKeyID: !GetAtt S3KMSKey.Arn
      BucketName:
        Fn::Sub: "${SourceBucketName}-encryption-service"
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: 's3:ObjectCreated:*'
            Function: !GetAtt AppendItemToListFunction.Arn
      VersioningConfiguration:
        Status: 'Enabled'
      ReplicationConfiguration:
        Role: !GetAtt SourceBucketRole.Arn
        Rules:
          - Destination:
              Bucket: !Sub "arn:aws:s3:::${DestinationBucketName}"
            Prefix: ""
            Status: Enabled


  SourceBucketPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: 'source-bucket-replication-permissions'
      Roles:
        - Ref: 'SourceBucketRole'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Action:
              - 's3:GetObjectVersionForReplication'
              - 's3:GetObjectVersionAcl'
              - 's3:GetObject'
            Resource:
              - !Sub 'arn:aws:s3:::${SourceBucketName}/*'
          - Effect: 'Allow'
            Action:
              - 's3:ListBucket'
              - 's3:GetReplicationConfiguration'
            Resource:
              - !Sub 'arn:aws:s3:::${SourceBucketName}'
          - Effect: 'Allow'
            Action:
              - 's3:ReplicateObject'
              - 's3:ReplicateDelete'
              - 's3:ReplicateTags'
              - 's3:GetObjectVersionTagging'
            Resource: !Sub 'arn:aws:s3:::${DestinationBucketName}-${DestinationRegion}/*'
        
# S3 CrossRegion+Lambda end
# ----------------------------------------------------------------------------------------------------------------------

# S3Admin Role
#-------------------------------------------------------------------------------------------------------------------
  AdminIAMRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: administrator
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: s3.amazonaws.com
            Action: sts:AssumeRole

  S3AdministratorPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: S3AdministratorPolicy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AdministratorAccessForS3Bucket
            Effect: Allow
            Action:
              - s3:GetObject
              - s3:PutObject
              - s3:DeleteObject
            Resource:
              - !Sub 'arn:aws:s3:::${SourceBucketName}/*'
      Roles:
        - !Ref AdminIAMRole
# S3 Admin Role end
# ----------------------------------------------------------------------------------------------------------------
# LoadBalancer and root53
# --------------------------------------------------------------------------------------------------


  MyDNSRecordDB:
    Type: AWS::Route53::RecordSetGroup  
    Properties: 
      HostedZoneId: Z06886521XUTFTL22VM0N
      RecordSets: 
        - Name: borisDB.team-c.internal 
          Type: CNAME  
          TTL: 300  
          ResourceRecords:  
            - !GetAtt MyDBInstance.Endpoint.Address

# LoadBalancer and Root53 end
# --------------------------------------------------------------------------------------------------

# S3 StaticContent + CloudFront
# ---------------------------------------------------------------------------------------------------
  # S3StaticContentBucket:
  #   Type: AWS::S3::Bucket
  #   Properties:
  #     BucketName: !Ref BucketName
  #     PublicAccessBlockConfiguration:
  #       BlockPublicAcls: false
  #       BlockPublicPolicy: false
  #       IgnorePublicAcls: false
  #       RestrictPublicBuckets: false
  #     WebsiteConfiguration:
  #       IndexDocument: index.html
  #       RoutingRules:
  #         - RoutingRuleCondition:
  #             HttpErrorCodeReturnedEquals: '404'
  #           RedirectRule:
  #             ReplaceKeyPrefixWith: report-404/
  #             HttpRedirectCode: '301'
  
  # BucketPolicy:
  #   Type: AWS::S3::BucketPolicy
  #   Properties:
  #     Bucket: !Ref S3StaticContentBucket
  #     PolicyDocument:
  #       Id: MyPolicy
  #       Version: 2012-10-17
  #       Statement:
  #         - Sid: PublicReadForGetBucketObjects
  #           Effect: Allow
  #           Principal: '*'
  #           Action: 's3:GetObject'
  #           Resource: !Join
  #             - ''
  #             - - 'arn:aws:s3:::'
  #               - !Ref S3StaticContentBucket
  #               - /*

  # Route53DNSRecord:
  #   Type: AWS::Route53::RecordSet
  #   Properties:
  #     HostedZoneName: team-c.internal.
  #     Name: s3testdomain.team-c.internal
  #     Type: CNAME
  #     ResourceRecords:  # S3StaticContentBucket
  #       - !Join ["", [!Ref BucketName, ".s3-website.eu-central-1.amazonaws.com"]]
  #     TTL: 300

# -------------------------------------------------------------

  # S3StaticContentBucket:
  #   Type: AWS::S3::Bucket
  #   Properties:
  #     BucketName: !Ref BucketName
  #     PublicAccessBlockConfiguration:
  #       BlockPublicAcls: false
  #       BlockPublicPolicy: false
  #       IgnorePublicAcls: false
  #       RestrictPublicBuckets: false
  #     WebsiteConfiguration:
  #       IndexDocument: index.html
  #       RoutingRules:
  #         - RoutingRuleCondition:
  #             HttpErrorCodeReturnedEquals: '404'
  #           RedirectRule:
  #             ReplaceKeyPrefixWith: report-404/
  #             HttpRedirectCode: '301'

  # BucketPolicy:
  #   Type: AWS::S3::BucketPolicy
  #   Properties:
  #     Bucket: !Ref S3StaticContentBucket
  #     PolicyDocument:
  #       Id: MyPolicy
  #       Version: 2012-10-17
  #       Statement:
  #         - Sid: PublicReadForGetBucketObjects
  #           Effect: Allow
  #           Principal: '*'
  #           Action: 's3:GetObject'
  #           Resource: !Join
  #             - ''
  #             - - 'arn:aws:s3:::'
  #               - !Ref S3StaticContentBucket
  #               - /*
  
  # CloudFrontOriginAccessIdentity:
  #   Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
  #   Properties:
  #     CloudFrontOriginAccessIdentityConfig:
  #       Comment: Origin Access Identity for Serverless Static with Basic Auth

  # Distribution:
  #   Type: AWS::CloudFront::Distribution
  #   Properties:
  #     DistributionConfig:
  #       Aliases:
  #         - !Ref DomainName
  #       DefaultCacheBehavior:
  #         AllowedMethods:
  #           - GET
  #           - HEAD
  #         ForwardedValues:
  #           Cookies:
  #             Forward: none
  #           QueryString: false
  #         TargetOriginId: s3Origin
  #         ViewerProtocolPolicy: redirect-to-https
  #       DefaultRootObject: index.html
  #       Enabled: true
  #       Origins:
  #         - DomainName: !GetAtt S3StaticContentBucket.DomainName
  #           Id: s3Origin
  #           S3OriginConfig:
  #             OriginAccessIdentity: !Sub origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}
  #       ViewerCertificate:
  #         AcmCertificateArn: !Ref AcmCertificate
  #         SslSupportMethod: sni-only

  # WwwDistribution:
  #   Type: AWS::CloudFront::Distribution
  #   Properties:
  #     DistributionConfig:
  #       Aliases:
  #         - !Sub www.${DomainName}
  #       DefaultCacheBehavior:
  #         AllowedMethods:
  #           - GET
  #           - HEAD
  #         ForwardedValues:
  #           Cookies:
  #             Forward: none
  #           QueryString: false
  #         TargetOriginId: s3Origin
  #         ViewerProtocolPolicy: allow-all
  #       Enabled: true
  #       Origins:
  #         - CustomOriginConfig:
  #             OriginProtocolPolicy: http-only
  #           DomainName: !Select [1, !Split ["//", !GetAtt S3StaticContentBucket.WebsiteURL]]
  #           Id: s3Origin
  #       ViewerCertificate:
  #         AcmCertificateArn: !Ref AcmCertificate
  #         SslSupportMethod: sni-only

  # #############################
  # # NETWORKING
  # #############################

  # HostedZone:
  #   Type: AWS::Route53::HostedZone
  #   Properties:
  #     Name: !Ref DomainName

  # RecordSet:
  #   Type: AWS::Route53::RecordSet
  #   Properties:
  #     AliasTarget:
  #       HostedZoneId: Z06886521XUTFTL22VM0N # required
  #       DNSName: !GetAtt Distribution.DomainName
  #     HostedZoneName: !Sub ${DomainName}.
  #     Name: !Ref DomainName
  #     Type: A

  # WwwRecordSet:
  #   Type: AWS::Route53::RecordSet
  #   Properties:
  #     AliasTarget:
  #       HostedZoneId: Z06886521XUTFTL22VM0N # required
  #       DNSName: !GetAtt WwwDistribution.DomainName
  #     HostedZoneName: !Sub ${DomainName}.
  #     Name: !Sub www.${DomainName}
  #     Type: A

  # AcmCertificate:
  #   Type: AWS::CertificateManager::Certificate
  #   Properties:
  #     DomainName: !Ref DomainName
  #     ValidationMethod: EMAIL

  # WwwAcmCertificate:
  #   Type: AWS::CertificateManager::Certificate
  #   Properties:
  #     DomainName: !Sub www.${DomainName}
  #     ValidationMethod: EMAIL


# S3 StaticContent+CloudFront end
# __________________________________________________________________________________________________________

# Security-KMS
# -------------------------------------------------------------------------------------------------------------------

  S3KMSKey:
    Type: AWS::KMS::Key
    Properties:
      Description: KMS Key for S3
      PendingWindowInDays: 7
      Enabled: true
      KeyPolicy:
        Version: '2012-10-17'
        Id: key-default-1
        Statement:
          - Sid: root-access
            Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action: 'kms:*'
            Resource: '*'
          - Sid: s3-admin-access
            Effect: Allow
            Principal:
              AWS: !GetAtt AdminIAMRole.Arn
            Action:
              - 'kms:Decrypt'
            Resource: '*'
      PendingWindowInDays: 7


  RDSKMSKey:
    Type: AWS::KMS::Key
    Properties:
      Description: KMS key for RDS encryption
      KeyPolicy:
        Version: '2012-10-17'
        Id: key-default-1
        Statement:
          - Sid: Allow administration of the key
            Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:role/team_c_admin_role
            Action:
              - kms:Create*
              - kms:Describe*
              - kms:Enable*
              - kms:List*
              - kms:Put*
              - kms:Update*
              - kms:Revoke*
              - kms:Disable*
              - kms:Get*
              - kms:Delete*
              - kms:ScheduleKeyDeletion
              - kms:CancelKeyDeletion
            Resource: '*'
          - Sid: Allow use of the key
            Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action:
              - kms:Encrypt
              - kms:Decrypt
              - kms:ReEncrypt*
              - kms:GenerateDataKey
              - kms:GenerateDataKeyWithoutPlaintext
            Resource: '*'
          - Sid: Allow use of the key by Lambda Role
            Effect: Allow
            Principal:
              AWS: !Sub '{{resolve:ssm:/my/ssm/parameter/my-lambda-role-arn:1}}'
            Action:
              - kms:Encrypt
              - kms:Decrypt
              - kms:ReEncrypt*
              - kms:GenerateDataKey
              - kms:GenerateDataKeyWithoutPlaintext
              - kms:Create*
              - kms:Describe*
              - kms:Enable*
              - kms:List*
              - kms:Put*
              - kms:Update*
              - kms:Revoke*
              - kms:Disable*
              - kms:Get*
              - kms:Delete*
              - kms:ScheduleKeyDeletion
              - kms:CancelKeyDeletion
              - kms:ReplicateKey
            Resource: '*'


# Security-KMS end
# -------------------------------------------------------------------------------------------------------------------



  